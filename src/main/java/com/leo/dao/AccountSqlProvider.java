package com.leo.dao;

import com.leo.domain.Account;
import com.leo.domain.AccountExample.Criteria;
import com.leo.domain.AccountExample.Criterion;
import com.leo.domain.AccountExample;
import java.util.List;
import java.util.Map;
import org.apache.ibatis.jdbc.SQL;

public class AccountSqlProvider {

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table ACCOUNT
     *
     * @mbg.generated
     */
    public String countByExample(AccountExample example) {
        SQL sql = new SQL();
        sql.SELECT("count(*)").FROM("ACCOUNT");
        applyWhere(sql, example, false);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table ACCOUNT
     *
     * @mbg.generated
     */
    public String deleteByExample(AccountExample example) {
        SQL sql = new SQL();
        sql.DELETE_FROM("ACCOUNT");
        applyWhere(sql, example, false);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table ACCOUNT
     *
     * @mbg.generated
     */
    public String insertSelective(Account record) {
        SQL sql = new SQL();
        sql.INSERT_INTO("ACCOUNT");
        
        if (record.getId() != null) {
            sql.VALUES("ID", "#{id,jdbcType=INTEGER}");
        }
        
        if (record.getAccid() != null) {
            sql.VALUES("ACCID", "#{accid,jdbcType=INTEGER}");
        }
        
        if (record.getUsername() != null) {
            sql.VALUES("USERNAME", "#{username,jdbcType=VARCHAR}");
        }
        
        if (record.getPassword() != null) {
            sql.VALUES("PASSWORD", "#{password,jdbcType=VARCHAR}");
        }
        
        if (record.getCreatetime() != null) {
            sql.VALUES("CREATETIME", "#{createtime,jdbcType=VARCHAR}");
        }
        
        if (record.getBitmask() != null) {
            sql.VALUES("BITMASK", "#{bitmask,jdbcType=TINYINT}");
        }
        
        if (record.getForbidtime() != null) {
            sql.VALUES("FORBIDTIME", "#{forbidtime,jdbcType=INTEGER}");
        }
        
        if (record.getLastlogintime() != null) {
            sql.VALUES("LASTLOGINTIME", "#{lastlogintime,jdbcType=VARCHAR}");
        }
        
        if (record.getMobile() != null) {
            sql.VALUES("MOBILE", "#{mobile,jdbcType=VARCHAR}");
        }
        
        if (record.getDevstring() != null) {
            sql.VALUES("DEVSTRING", "#{devstring,jdbcType=VARCHAR}");
        }
        
        if (record.getPackageflag() != null) {
            sql.VALUES("PACKAGEFLAG", "#{packageflag,jdbcType=VARCHAR}");
        }
        
        if (record.getLoginpackagetype() != null) {
            sql.VALUES("LOGINPACKAGETYPE", "#{loginpackagetype,jdbcType=INTEGER}");
        }
        
        if (record.getPackagetype() != null) {
            sql.VALUES("PACKAGETYPE", "#{packagetype,jdbcType=INTEGER}");
        }
        
        if (record.getCounttype() != null) {
            sql.VALUES("COUNTTYPE", "#{counttype,jdbcType=INTEGER}");
        }
        
        if (record.getRegiestip() != null) {
            sql.VALUES("REGIESTIP", "#{regiestip,jdbcType=VARCHAR}");
        }
        
        if (record.getLogindevstring() != null) {
            sql.VALUES("LOGINDEVSTRING", "#{logindevstring,jdbcType=VARCHAR}");
        }
        
        if (record.getLoginpackageflag() != null) {
            sql.VALUES("LOGINPACKAGEFLAG", "#{loginpackageflag,jdbcType=VARCHAR}");
        }
        
        if (record.getSpreadid() != null) {
            sql.VALUES("SPREADID", "#{spreadid,jdbcType=INTEGER}");
        }
        
        if (record.getRegisttime() != null) {
            sql.VALUES("RegistTime", "#{registtime,jdbcType=BIGINT}");
        }
        
        if (record.getDevicetype() != null) {
            sql.VALUES("DEVICETYPE", "#{devicetype,jdbcType=INTEGER}");
        }
        
        if (record.getRoletime() != null) {
            sql.VALUES("roletime", "#{roletime,jdbcType=BIGINT}");
        }
        
        if (record.getLogindevinfo() != null) {
            sql.VALUES("logindevinfo", "#{logindevinfo,jdbcType=VARCHAR}");
        }
        
        if (record.getPversion() != null) {
            sql.VALUES("pversion", "#{pversion,jdbcType=VARCHAR}");
        }
        
        if (record.getRegversion() != null) {
            sql.VALUES("regversion", "#{regversion,jdbcType=VARCHAR}");
        }
        
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table ACCOUNT
     *
     * @mbg.generated
     */
    public String selectByExample(AccountExample example) {
        SQL sql = new SQL();
        if (example != null && example.isDistinct()) {
            sql.SELECT_DISTINCT("ID");
        } else {
            sql.SELECT("ID");
        }
        sql.SELECT("ACCID");
        sql.SELECT("USERNAME");
        sql.SELECT("PASSWORD");
        sql.SELECT("CREATETIME");
        sql.SELECT("BITMASK");
        sql.SELECT("FORBIDTIME");
        sql.SELECT("LASTLOGINTIME");
        sql.SELECT("MOBILE");
        sql.SELECT("DEVSTRING");
        sql.SELECT("PACKAGEFLAG");
        sql.SELECT("LOGINPACKAGETYPE");
        sql.SELECT("PACKAGETYPE");
        sql.SELECT("COUNTTYPE");
        sql.SELECT("REGIESTIP");
        sql.SELECT("LOGINDEVSTRING");
        sql.SELECT("LOGINPACKAGEFLAG");
        sql.SELECT("SPREADID");
        sql.SELECT("RegistTime");
        sql.SELECT("DEVICETYPE");
        sql.SELECT("roletime");
        sql.SELECT("logindevinfo");
        sql.SELECT("pversion");
        sql.SELECT("regversion");
        sql.FROM("ACCOUNT");
        applyWhere(sql, example, false);
        
        if (example != null && example.getOrderByClause() != null) {
            sql.ORDER_BY(example.getOrderByClause());
        }
        
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table ACCOUNT
     *
     * @mbg.generated
     */
    public String updateByExampleSelective(Map<String, Object> parameter) {
        Account record = (Account) parameter.get("record");
        AccountExample example = (AccountExample) parameter.get("example");
        
        SQL sql = new SQL();
        sql.UPDATE("ACCOUNT");
        
        if (record.getId() != null) {
            sql.SET("ID = #{record.id,jdbcType=INTEGER}");
        }
        
        if (record.getAccid() != null) {
            sql.SET("ACCID = #{record.accid,jdbcType=INTEGER}");
        }
        
        if (record.getUsername() != null) {
            sql.SET("USERNAME = #{record.username,jdbcType=VARCHAR}");
        }
        
        if (record.getPassword() != null) {
            sql.SET("PASSWORD = #{record.password,jdbcType=VARCHAR}");
        }
        
        if (record.getCreatetime() != null) {
            sql.SET("CREATETIME = #{record.createtime,jdbcType=VARCHAR}");
        }
        
        if (record.getBitmask() != null) {
            sql.SET("BITMASK = #{record.bitmask,jdbcType=TINYINT}");
        }
        
        if (record.getForbidtime() != null) {
            sql.SET("FORBIDTIME = #{record.forbidtime,jdbcType=INTEGER}");
        }
        
        if (record.getLastlogintime() != null) {
            sql.SET("LASTLOGINTIME = #{record.lastlogintime,jdbcType=VARCHAR}");
        }
        
        if (record.getMobile() != null) {
            sql.SET("MOBILE = #{record.mobile,jdbcType=VARCHAR}");
        }
        
        if (record.getDevstring() != null) {
            sql.SET("DEVSTRING = #{record.devstring,jdbcType=VARCHAR}");
        }
        
        if (record.getPackageflag() != null) {
            sql.SET("PACKAGEFLAG = #{record.packageflag,jdbcType=VARCHAR}");
        }
        
        if (record.getLoginpackagetype() != null) {
            sql.SET("LOGINPACKAGETYPE = #{record.loginpackagetype,jdbcType=INTEGER}");
        }
        
        if (record.getPackagetype() != null) {
            sql.SET("PACKAGETYPE = #{record.packagetype,jdbcType=INTEGER}");
        }
        
        if (record.getCounttype() != null) {
            sql.SET("COUNTTYPE = #{record.counttype,jdbcType=INTEGER}");
        }
        
        if (record.getRegiestip() != null) {
            sql.SET("REGIESTIP = #{record.regiestip,jdbcType=VARCHAR}");
        }
        
        if (record.getLogindevstring() != null) {
            sql.SET("LOGINDEVSTRING = #{record.logindevstring,jdbcType=VARCHAR}");
        }
        
        if (record.getLoginpackageflag() != null) {
            sql.SET("LOGINPACKAGEFLAG = #{record.loginpackageflag,jdbcType=VARCHAR}");
        }
        
        if (record.getSpreadid() != null) {
            sql.SET("SPREADID = #{record.spreadid,jdbcType=INTEGER}");
        }
        
        if (record.getRegisttime() != null) {
            sql.SET("RegistTime = #{record.registtime,jdbcType=BIGINT}");
        }
        
        if (record.getDevicetype() != null) {
            sql.SET("DEVICETYPE = #{record.devicetype,jdbcType=INTEGER}");
        }
        
        if (record.getRoletime() != null) {
            sql.SET("roletime = #{record.roletime,jdbcType=BIGINT}");
        }
        
        if (record.getLogindevinfo() != null) {
            sql.SET("logindevinfo = #{record.logindevinfo,jdbcType=VARCHAR}");
        }
        
        if (record.getPversion() != null) {
            sql.SET("pversion = #{record.pversion,jdbcType=VARCHAR}");
        }
        
        if (record.getRegversion() != null) {
            sql.SET("regversion = #{record.regversion,jdbcType=VARCHAR}");
        }
        
        applyWhere(sql, example, true);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table ACCOUNT
     *
     * @mbg.generated
     */
    public String updateByExample(Map<String, Object> parameter) {
        SQL sql = new SQL();
        sql.UPDATE("ACCOUNT");
        
        sql.SET("ID = #{record.id,jdbcType=INTEGER}");
        sql.SET("ACCID = #{record.accid,jdbcType=INTEGER}");
        sql.SET("USERNAME = #{record.username,jdbcType=VARCHAR}");
        sql.SET("PASSWORD = #{record.password,jdbcType=VARCHAR}");
        sql.SET("CREATETIME = #{record.createtime,jdbcType=VARCHAR}");
        sql.SET("BITMASK = #{record.bitmask,jdbcType=TINYINT}");
        sql.SET("FORBIDTIME = #{record.forbidtime,jdbcType=INTEGER}");
        sql.SET("LASTLOGINTIME = #{record.lastlogintime,jdbcType=VARCHAR}");
        sql.SET("MOBILE = #{record.mobile,jdbcType=VARCHAR}");
        sql.SET("DEVSTRING = #{record.devstring,jdbcType=VARCHAR}");
        sql.SET("PACKAGEFLAG = #{record.packageflag,jdbcType=VARCHAR}");
        sql.SET("LOGINPACKAGETYPE = #{record.loginpackagetype,jdbcType=INTEGER}");
        sql.SET("PACKAGETYPE = #{record.packagetype,jdbcType=INTEGER}");
        sql.SET("COUNTTYPE = #{record.counttype,jdbcType=INTEGER}");
        sql.SET("REGIESTIP = #{record.regiestip,jdbcType=VARCHAR}");
        sql.SET("LOGINDEVSTRING = #{record.logindevstring,jdbcType=VARCHAR}");
        sql.SET("LOGINPACKAGEFLAG = #{record.loginpackageflag,jdbcType=VARCHAR}");
        sql.SET("SPREADID = #{record.spreadid,jdbcType=INTEGER}");
        sql.SET("RegistTime = #{record.registtime,jdbcType=BIGINT}");
        sql.SET("DEVICETYPE = #{record.devicetype,jdbcType=INTEGER}");
        sql.SET("roletime = #{record.roletime,jdbcType=BIGINT}");
        sql.SET("logindevinfo = #{record.logindevinfo,jdbcType=VARCHAR}");
        sql.SET("pversion = #{record.pversion,jdbcType=VARCHAR}");
        sql.SET("regversion = #{record.regversion,jdbcType=VARCHAR}");
        
        AccountExample example = (AccountExample) parameter.get("example");
        applyWhere(sql, example, true);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table ACCOUNT
     *
     * @mbg.generated
     */
    public String updateByPrimaryKeySelective(Account record) {
        SQL sql = new SQL();
        sql.UPDATE("ACCOUNT");
        
        if (record.getAccid() != null) {
            sql.SET("ACCID = #{accid,jdbcType=INTEGER}");
        }
        
        if (record.getUsername() != null) {
            sql.SET("USERNAME = #{username,jdbcType=VARCHAR}");
        }
        
        if (record.getPassword() != null) {
            sql.SET("PASSWORD = #{password,jdbcType=VARCHAR}");
        }
        
        if (record.getCreatetime() != null) {
            sql.SET("CREATETIME = #{createtime,jdbcType=VARCHAR}");
        }
        
        if (record.getBitmask() != null) {
            sql.SET("BITMASK = #{bitmask,jdbcType=TINYINT}");
        }
        
        if (record.getForbidtime() != null) {
            sql.SET("FORBIDTIME = #{forbidtime,jdbcType=INTEGER}");
        }
        
        if (record.getLastlogintime() != null) {
            sql.SET("LASTLOGINTIME = #{lastlogintime,jdbcType=VARCHAR}");
        }
        
        if (record.getMobile() != null) {
            sql.SET("MOBILE = #{mobile,jdbcType=VARCHAR}");
        }
        
        if (record.getDevstring() != null) {
            sql.SET("DEVSTRING = #{devstring,jdbcType=VARCHAR}");
        }
        
        if (record.getPackageflag() != null) {
            sql.SET("PACKAGEFLAG = #{packageflag,jdbcType=VARCHAR}");
        }
        
        if (record.getLoginpackagetype() != null) {
            sql.SET("LOGINPACKAGETYPE = #{loginpackagetype,jdbcType=INTEGER}");
        }
        
        if (record.getPackagetype() != null) {
            sql.SET("PACKAGETYPE = #{packagetype,jdbcType=INTEGER}");
        }
        
        if (record.getCounttype() != null) {
            sql.SET("COUNTTYPE = #{counttype,jdbcType=INTEGER}");
        }
        
        if (record.getRegiestip() != null) {
            sql.SET("REGIESTIP = #{regiestip,jdbcType=VARCHAR}");
        }
        
        if (record.getLogindevstring() != null) {
            sql.SET("LOGINDEVSTRING = #{logindevstring,jdbcType=VARCHAR}");
        }
        
        if (record.getLoginpackageflag() != null) {
            sql.SET("LOGINPACKAGEFLAG = #{loginpackageflag,jdbcType=VARCHAR}");
        }
        
        if (record.getSpreadid() != null) {
            sql.SET("SPREADID = #{spreadid,jdbcType=INTEGER}");
        }
        
        if (record.getRegisttime() != null) {
            sql.SET("RegistTime = #{registtime,jdbcType=BIGINT}");
        }
        
        if (record.getDevicetype() != null) {
            sql.SET("DEVICETYPE = #{devicetype,jdbcType=INTEGER}");
        }
        
        if (record.getRoletime() != null) {
            sql.SET("roletime = #{roletime,jdbcType=BIGINT}");
        }
        
        if (record.getLogindevinfo() != null) {
            sql.SET("logindevinfo = #{logindevinfo,jdbcType=VARCHAR}");
        }
        
        if (record.getPversion() != null) {
            sql.SET("pversion = #{pversion,jdbcType=VARCHAR}");
        }
        
        if (record.getRegversion() != null) {
            sql.SET("regversion = #{regversion,jdbcType=VARCHAR}");
        }
        
        sql.WHERE("ID = #{id,jdbcType=INTEGER}");
        
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table ACCOUNT
     *
     * @mbg.generated
     */
    protected void applyWhere(SQL sql, AccountExample example, boolean includeExamplePhrase) {
        if (example == null) {
            return;
        }
        
        String parmPhrase1;
        String parmPhrase1_th;
        String parmPhrase2;
        String parmPhrase2_th;
        String parmPhrase3;
        String parmPhrase3_th;
        if (includeExamplePhrase) {
            parmPhrase1 = "%s #{example.oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{example.oredCriteria[%d].allCriteria[%d].value} and #{example.oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{example.oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{example.oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{example.oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        } else {
            parmPhrase1 = "%s #{oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{oredCriteria[%d].allCriteria[%d].value} and #{oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        }
        
        StringBuilder sb = new StringBuilder();
        List<Criteria> oredCriteria = example.getOredCriteria();
        boolean firstCriteria = true;
        for (int i = 0; i < oredCriteria.size(); i++) {
            Criteria criteria = oredCriteria.get(i);
            if (criteria.isValid()) {
                if (firstCriteria) {
                    firstCriteria = false;
                } else {
                    sb.append(" or ");
                }
                
                sb.append('(');
                List<Criterion> criterions = criteria.getAllCriteria();
                boolean firstCriterion = true;
                for (int j = 0; j < criterions.size(); j++) {
                    Criterion criterion = criterions.get(j);
                    if (firstCriterion) {
                        firstCriterion = false;
                    } else {
                        sb.append(" and ");
                    }
                    
                    if (criterion.isNoValue()) {
                        sb.append(criterion.getCondition());
                    } else if (criterion.isSingleValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase1, criterion.getCondition(), i, j));
                        } else {
                            sb.append(String.format(parmPhrase1_th, criterion.getCondition(), i, j,criterion.getTypeHandler()));
                        }
                    } else if (criterion.isBetweenValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase2, criterion.getCondition(), i, j, i, j));
                        } else {
                            sb.append(String.format(parmPhrase2_th, criterion.getCondition(), i, j, criterion.getTypeHandler(), i, j, criterion.getTypeHandler()));
                        }
                    } else if (criterion.isListValue()) {
                        sb.append(criterion.getCondition());
                        sb.append(" (");
                        List<?> listItems = (List<?>) criterion.getValue();
                        boolean comma = false;
                        for (int k = 0; k < listItems.size(); k++) {
                            if (comma) {
                                sb.append(", ");
                            } else {
                                comma = true;
                            }
                            if (criterion.getTypeHandler() == null) {
                                sb.append(String.format(parmPhrase3, i, j, k));
                            } else {
                                sb.append(String.format(parmPhrase3_th, i, j, k, criterion.getTypeHandler()));
                            }
                        }
                        sb.append(')');
                    }
                }
                sb.append(')');
            }
        }
        
        if (sb.length() > 0) {
            sql.WHERE(sb.toString());
        }
    }
}